generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // hoặc "postgresql", "sqlite"
  url      = env("DATABASE_URL")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

model User {
  id                  Int           @id @default(autoincrement())
  name                String
  username            String?
  email               String        @unique
  password            String
  avatar              String?
  messages            Message[]
  participants        Participant[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  sentFriendships     Friendship[]  @relation("SentFriendships")
  receivedFriendships Friendship[]  @relation("ReceivedFriendships")
}

model Conversation {
  id           Int           @id @default(autoincrement())
  title        String? // Tên nhóm (nếu là group chat)
  avatar       String?
  isGroup      Boolean       @default(false)
  messages     Message[]
  participants Participant[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Participant {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  joinedAt       DateTime     @default(now())

  @@unique([userId, conversationId])
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  sentAt         DateTime     @default(now())
}

model Friendship {
  id         Int              @id @default(autoincrement())
  userId     Int
  friendId   Int
  status     FriendshipStatus @default(PENDING)
  sentAt     DateTime         @default(now())
  acceptedAt DateTime?

  sender   User @relation("SentFriendships", fields: [userId], references: [id])
  received User @relation("ReceivedFriendships", fields: [friendId], references: [id])
}
